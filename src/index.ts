import { getObjectFile, fileToObjWithVariables } from 'exjsona';
import { Config, Obj } from '@/types';
import { getFile } from '@/lib';
import { objToEnv, DEFAULT_OBJ_DEPTH } from '@/env';
import * as path from 'path';
import fs from 'fs';
import minimist from 'minimist';
import config from '../.epconfig.json';


// Third-parties

const processArgs = process.argv?.slice(2) ?? [];

const args = minimist(processArgs);


// Constants

export const CONFIG_NAME = '.epconfig.json';

export const DEFAULT_ENV = '# Autogenerated with env-preset';

export const DEFAULT_INPUT_FILE_NAME = '.examples/prod.json';

export const DEFAULT_INPUT_ENV_FILE_NAME = '.examples/prod.json';

export const DEFAULT_OUTPUT_FILE_NAME = '.env';

export const DEFAULT_DEPTH = 3;

// export const DEFAULT_LOGGING = 0;

export const DEFAULT_ERROR_LOGGING = 1;


// Variables

export const dir = process.cwd();

export const inputArg = args?.input ?? null;

export const envArg = args?.env ?? null;

export const outputArg = args?.output ?? null;

export const depthArg = args?.depth ?? null;

export const objDepthArg = args?.objDepth ?? null;

// export const loggingArg = args?.logging ?? null;

export const errorsArg = args?.errors ?? null;


// Functions

export function getConfig(): Config {
    const extraConfigPath = path.join(dir, CONFIG_NAME);

    const extraConfig = getObjectFile(extraConfigPath, DEFAULT_DEPTH);

    return { ...config, ...extraConfig } as Config;
}

export function fileToWithVariables(input: string, output: string, env: string = DEFAULT_ENV, variables: Obj = {}, depth: number = DEFAULT_DEPTH, objDepth: number = DEFAULT_OBJ_DEPTH): void {
    const object = fileToObjWithVariables(input, variables, depth, objDepth);
    const json = objToEnv(object);
    const result = env + '\n' + json;

    fs.writeFile(output, result.trim(), (err) => {
        if (err) throw err;
    });
}

export function use(): void {

    // Loading custom configuration

    const config = getConfig();

    const depth = depthArg ?? config?.depth ?? DEFAULT_DEPTH;

    const objDepth = objDepthArg ?? config?.objDepth ?? DEFAULT_OBJ_DEPTH;

    const errorLogging = errorsArg ?? config?.errorLogging ?? DEFAULT_ERROR_LOGGING;

    const input = inputArg || config?.input || DEFAULT_INPUT_FILE_NAME;

    const envInput = envArg || config?.envInput || DEFAULT_INPUT_ENV_FILE_NAME;

    const output = outputArg || config?.output || DEFAULT_OUTPUT_FILE_NAME;


    // Getting the ENV

    const envFilename = path.join(dir, envInput);
    const env = getFile(envFilename) ?? DEFAULT_ENV;


    // Generating the ENV file

    try {
        fileToWithVariables(input, output, env, {}, depth, objDepth);
    } catch (e: any) {
        if (!errorLogging) return;
        throw e;
    }
}
